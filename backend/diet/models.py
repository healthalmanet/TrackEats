from django.db import models
from django.conf import settings
from django.utils import timezone


class DietRecommendation(models.Model):
    """
    Stores an AI-generated diet plan and tracks its lifecycle from
    generation through nutritionist review and its use in retraining.
    """
    STATUS_CHOICES = [
        ('pending', 'Pending Review'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
    ]

    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="diet_recommendations")
    for_week_starting = models.DateField(default=timezone.now)
    meals = models.JSONField(default=dict, help_text="The full 15-day meal plan generated by AI.")


    # --- Review & Workflow Fields ---
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pending')
    nutritionist_comment = models.TextField(
        blank=True, null=True, help_text="Comments from the nutritionist for the user."
    )
    reviewed_by = models.ForeignKey(
        settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name='reviewed_diets'
    )

    # --- Retraining Pipeline Fields ---
    user_profile_snapshot = models.JSONField(
        null=True, blank=True, help_text="Immutable JSON of the user's health vector at generation time."
    )
    original_ai_plan = models.JSONField(
        null=True, blank=True, help_text="The unmodified plan from the AI for comparison."
    )
    approved_for_retraining = models.BooleanField(
        default=False, help_text="Flagged by a nutritionist as a high-quality example for retraining."
    )
    nutritionist_retraining_notes = models.TextField(
        blank=True, null=True, 
        help_text="Internal notes for the ML team about this plan's quality."
    )
    was_used_for_retraining = models.BooleanField(
        default=False, db_index=True, help_text="Set automatically after the plan is used for training."
    )

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Plan for {self.user.full_name} starting {self.for_week_starting} ({self.get_status_display()})"

    def get_plan_sequence_ids(self, food_vocab):
        """
        Converts meal items to food vocab index sequence.
        """
        if not self.meals or not food_vocab:
            return []
        sequence_ids = []
        day_keys = sorted(self.meals.keys(), key=lambda x: int(x.split(' ')[1]))
        meal_order = ['Early Morning', 'Breakfast', 'Mid-Morning Snack', 'Lunch', 'Evening Snack', 'Dinner', 'Bedtime']
        for day_key in day_keys:
            day_data = self.meals.get(day_key, {})
            if "meals" in day_data:
                for meal_name in meal_order:
                    meal_info = day_data["meals"].get(meal_name, {})
                    food_item_name = meal_info.get("item")
                    if food_item_name and food_item_name in food_vocab:
                        sequence_ids.append(food_vocab[food_item_name])
        return sequence_ids
    

class DietFeedback(models.Model):
    """
    Stores feedback submitted by a user for a specific day of their diet plan.
    """
    recommendation = models.ForeignKey(DietRecommendation, on_delete=models.CASCADE, related_name='feedbacks')
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    
    # This now aligns with the JSON keys in the 'meals' field of DietRecommendation
    day = models.CharField(max_length=15, help_text="e.g., 'Day 1', 'Day 8', etc.")
    
    feedback = models.TextField()
    rating = models.PositiveSmallIntegerField(help_text="User rating from 1 to 5.", null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('recommendation', 'user', 'day') # User can only submit one feedback per day per plan

    def __str__(self):
        return f"Feedback by {self.user.full_name} for {self.day} of plan {self.recommendation.id}"
    